/*  _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
 * / \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \
 * \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/
 *
 * Sets an E-Bike throttle proportinal to the Cadence of the rider
 * Displays Speed and Cadence on graphic LCD
 *
 * 	for more information visit
 * 		www.ideahex.com
 *
 * Written by Damian Kleiss
 * 
 * 24/01/16 Updated LCD display to be seperate functions
 * 25/01/16	Added averaging for Voltage reading
 * 					Added under voltage shutdown
 * 					Moved Voltage calculations to seperate functions
 *  					Moved Current calculations to seperate functions
 *  04/03/2016 Added Pot to read max throtte setting
 *  					Changed voltage settings for 10S battery
 *  					zero current on turn on
 *  					Changed throttle calculations to float
 *  _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
 * / \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \
 * \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \*/

// Includes //
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>


// Definitions //
// Pin outs
//#define	_PIN	1		// Not Used
// Motor control and sensors
const int	CADENCE_PIN		=2;	// external interrupt 0, cadence sensor connected to pin 2
//const int	SPEED_PIN			=3;	// external interrupt 1, PWM, Speed sensor connected to pin 3
const int	OVERIDE_PIN_GND		=3;	// overide switch sensor connected to pin 4
const int	OVERIDE_PIN		=4;	// overide switch sensor connected to pin 4
const int	THROTTLE_PIN	=5;	// PWM, throttle output connected to pin 5
// LCD
const int	LCD_DC_PIN			=6;	// PWM, LCD Data or Command Select pin
const int	LCD_LIGHT_PIN	=7;	// Base of transistor controlling LEDs on LCD Breakout board
const int	LCD_RST_PIN		=8;	// LCD Reset Pin
// SPI
const int	LCD_CE					=9;	// Chip Enable for LCD
const int	SD_CS_PIN			=10;	// Chip Select for SD Card
const int	MOSI_PIN				=11;	// Master Oout Slave In for SPI, LCD and SD Card
const int	MISO_PIN				=12;	// Master In Slave Out for SPI, LCD and SD Card
const int	SCK_PIN					=13;	// Clock for SPI, LCD and SD Card
// Switches
//const int	SW_UP_PIN			=A0;	// Use Pin Change Interupts
//const int	SW_DOWN_PIN			=A1;	// Use Pin Change Interupts
const int	SW_LEFT_PIN			=A2;	// Use Pin Change Interupts
//const int	SW_RIGHT_PIN			=A3;	// Use Pin Change Interupts
const int 	POT							=A3;
// Battery Monitoring
const int	BATT_V_PIN		=A4;	// E-Bike Battery Voltage
const int	BATT_A_PIN		=A5;	// E-Bike Battery Current
const int 	BRAKE_PIN1			=	A0;	//i0
const int 	BRAKE_PIN2			=	A1;	//
//const int	_PIN		=A6;	// Not used
//const int	_PIN		=A7;	// Not used

//										   (SCLK),  (DIN),	   (D/C),     (CS),    (RST)
//Adafruit_PCD8544 LCD_disp = Adafruit_PCD8544(SCK_PIN, MOSI_PIN, LCD_DC_PIN, LCD_CE, LCD_RST_PIN);

// Use Hardware SPI
// pin 5 - Data/Command select
// pin 4 - LCD chip select
// pin 3 - LCD reset
//										(D/C),(CS),(RST)
Adafruit_PCD8544 LCD_disp = Adafruit_PCD8544(LCD_DC_PIN, LCD_CE, LCD_RST_PIN);


const int CADENCE_MAGNETS =5;	// The number of Magnets passing the Cadence sensor for one revolution of the cranks
const int SPEED_MAGENTS	=1;	// The number of Magnets passing the Speed sensor for one revolution of the wheel
//const int WHEEL_CIRCUMFERENCE

const int THROTTLE_MIN =0;		// Min value required before power is applied to the motor
//const int THROTTLE_MAX = 240;	// A larger throttle value will not result in more power
int THROTTLE_MAX = 100;	// A larger throttle value will not result in more power
const int THROTTLE_OFF =0;		// Value to ensure that the motor is off

const int CADENCE_MIN	=30;//15;	// minimum cadence for motor to run
const int CADENCE_MAX	=80;	// cadence value that will result in full throttle
const int MAX_CADENCE_PERIOD =60000/(CADENCE_MIN *CADENCE_MAGNETS);	// Convert rpm to period
//const int THROTTLE_STEP =(THROTTLE_MAX-THROTTLE_MIN)/(CADENCE_MAX-CADENCE_MIN);	// Throttle ramp value
float THROTTLE_STEP =(float) (THROTTLE_MAX-THROTTLE_MIN)/ (float) (CADENCE_MAX-CADENCE_MIN);	// Throttle ramp value

// Current sensor is Alegro ACS 756
// Changed to ACS712 20 A
//	Ratio 100mV/Amp
// Motor Controller switching frequency is about 15kHz
// Passive filter is 10k and 100nF about 160Hz
// Ratio = 20mV/Amp ??????

// Aref = 5V
// bits = 10
// (Aref/2^bits) /(Ratio/1000)*1000
const float CURRENT_MULTIPLIER = 0.244140625;
int CURRENT_OFFSET = 515;
const int NUM_CURRENT_READINGS = 10;
volatile int currentReading[NUM_CURRENT_READINGS ];
volatile int currentIndex = 0;
volatile int currentTotal = 0;
volatile int currentAverage = 0;

// Voltage divider
// Rtop 100k Rbot 10K	
// Aref = 5V
// bits = 10
// (Aref/2^bits)/(Rbot/(Rtop + Rbot)) = 
const float VoltageMultiplier = 0.0537109375;
const int NUM_VOLTAGE_READINGS = 10;
volatile int voltageReading[NUM_CURRENT_READINGS ];
volatile int voltageIndex = 0;
volatile int voltageTotal = 0;
volatile int voltageAverage = 0;
const int  UNDER_VOLTAGE_CUTOUT = 2.9*10;//19;
const int  ON_VOLTAGE = 3.1*10;//20.5;

// LCD Specs
const unsigned int  X_MAX = 48;
const unsigned int Y_MAX = 84;
const unsigned int FONT_HEIGHT = 8;
const unsigned int FONT_WIDTH = 5;

// Global Variables //
volatile int throttleValue = 0;

// Switch Variables
volatile int switchUpState;
volatile int previousSwitchUpState = HIGH;
volatile long switchUpDebounceTime = 0;
volatile int switchDownState;
volatile int previousSwitchDownState;
volatile int switchLeftState;
volatile int previousSwitchLeftState;
volatile int switchRightState;
volatile int previousSwitchRightState;
const long debounceDelay = 50;


// Cadence Variables
volatile int cadencePtr = 0;
const int CADENCE_AVES = CADENCE_MAGNETS;
volatile float cadenceRaw[CADENCE_AVES];
volatile float currentCadence = 0;
volatile int cadenceState = 0;
volatile long cadencePositiveTimer = 0;
volatile long cadencePositivePeriod = 0;
volatile long cadenceNegativeTimer = 0;
volatile long cadenceNegativePeriod = 0;
volatile int cadenceInteruptFlag = 0;

volatile unsigned long cadenceInterruptMillis = 0;
volatile int outputValue=0;

volatile unsigned int BacklightState = HIGH;

// Variables will change :
int ledState = LOW;             // ledState used to set the LED

// Generally, you shuould use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;        // will store last time LED was updated

// constants won't change :
const long interval = 250;           // interval at which to blink (milliseconds)

//int count;
void setup()
{
	pinMode(CADENCE_PIN, INPUT);
	pinMode(BRAKE_PIN1, OUTPUT);	// Use internal 
	digitalWrite(BRAKE_PIN1,HIGH);
	pinMode(BRAKE_PIN2, INPUT);	// Use internal 
	pinMode(OVERIDE_PIN, INPUT_PULLUP);	// Use internal pullups
	pinMode(OVERIDE_PIN_GND, OUTPUT);
	digitalWrite(OVERIDE_PIN_GND, LOW);
	pinMode(THROTTLE_PIN, OUTPUT);
	pinMode(LCD_LIGHT_PIN, OUTPUT);
	digitalWrite(LCD_LIGHT_PIN, BacklightState);
	//	pinMode(SW_UP_PIN, INPUT_PULLUP);	// Use internal pullups
	//	pinMode(SW_DOWN_PIN, INPUT_PULLUP);	// Use internal pullups
	//	pinMode(SW_LEFT_PIN, INPUT_PULLUP);	// Use internal pullups
	//	pinMode(SW_RIGHT_PIN, INPUT_PULLUP);	// Use internal pullups


	// initialize all the current readings to 0:
	for (int thisReading = 0; thisReading < NUM_CURRENT_READINGS; thisReading++) 
	{
		currentReading[thisReading] = 0;
	}

	//InitGraphing();


	Serial.begin(9600);
	Serial.println("Visit ideahex.com\r\n");
	//Serial.print("Y0:256:16\n");
	//Serial.print("ATemperature:255:0:0\n");

	LCD_disp.begin();
	LCD_disp.setContrast(30); // you can change the contrast around to adapt the display
	LCD_disp.clearDisplay();   // clears the screen and buffer
	LCD_disp.setRotation(1); 	// Flip display

	LCD_disp.setTextColor(BLACK);
	LCD_disp.setCursor(0,5);
	LCD_disp.setTextSize(2);
	LCD_disp.print("idea");
	LCD_disp.println(" Hex");

	LCD_disp.setTextSize(1);
	LCD_disp.setCursor(0,38);
	LCD_disp.print("E-Bike");
	LCD_disp.setCursor(0,48);
	LCD_disp.print("Controller");

	LCD_disp.display(); // show splashscreen
	delay(2000);
	//LCD_disp.clearDisplay();   // clears the screen and buffer

	// Determine the current offset
	for (int i=0; i < NUM_CURRENT_READINGS; i++)
	{
		UpdateCurrent();
	}
	CURRENT_OFFSET =  (currentTotal / NUM_CURRENT_READINGS);
	Serial.print("Current Offset = " );
	Serial.println(CURRENT_OFFSET*CURRENT_MULTIPLIER);

	LCD_disp.clearDisplay();   // clears the screen and buffer
	LCD_disp.setTextSize(1);
	LCD_disp.setCursor(0,0);
	LCD_disp.println("Current Offset = ");
	LCD_disp.setTextSize(2);
	LCD_disp.print(CURRENT_OFFSET*CURRENT_MULTIPLIER);
	LCD_disp.display(); 
delay(2000);

	attachInterrupt(0, CadenceInterruptHandler, CHANGE);	// External interrupt for cadence sensor
}

void loop()
{
	unsigned char brightness;
	long currentMillis = millis();
	int sensorValue;// = (analogRead(CURRENT_PIN)  - CurrentOffset) * CurrentMultiplier;
	int pos_x = 0;	//  Postion of current text on LCD
	int pos_y = 0;
	bool brake = true;
	THROTTLE_MAX = analogRead(POT)/10;
	THROTTLE_STEP =(float) (THROTTLE_MAX-THROTTLE_MIN)/ (float) (CADENCE_MAX-CADENCE_MIN);	// Throttle ramp value
	UpdateVoltage();

	if ( !(GetAverageVoltage() > ON_VOLTAGE))		// The battery voltage is not high enough to turn on
	{
		throttleValue = THROTTLE_OFF;
		analogWrite(THROTTLE_PIN, 255 - throttleValue); // Actualy output the throttle value

			if(currentMillis - previousMillis >= interval)
		{
			LCD_disp.clearDisplay();   // clears the screen and buffer
			pos_y = DisplayWarning ( 0, "UVC");
			pos_y =  DisplayValue ( pos_y, GetAverageVoltage(), 'V');
			LCD_disp.display();			// Transfer buffer to screen
			previousMillis = currentMillis;
		}
		currentMillis = millis();
	}
	else
	{	// Voltage is less than on but over Under

		if(currentMillis - previousMillis >= interval)
		{
			throttleValue = THROTTLE_OFF;
			analogWrite(THROTTLE_PIN, 255 - throttleValue); // Actualy output the throttle value
			LCD_disp.clearDisplay();   // clears the screen and buffer
			pos_y = DisplayWarning ( 0, "UVC");
			pos_y =  DisplayValue ( pos_y, GetAverageVoltage(), 'V');
			LCD_disp.display();			// Transfer buffer to screen
			previousMillis = currentMillis;
		}
		currentMillis = millis();
		while (GetAverageVoltage() > UNDER_VOLTAGE_CUTOUT)
		{
			UpdateVoltage();
			UpdateCurrent();
			THROTTLE_MAX = analogRead(POT)/10;
			THROTTLE_STEP =(float) (THROTTLE_MAX-THROTTLE_MIN)/ (float) (CADENCE_MAX-CADENCE_MIN);	// Throttle ramp value
			// As there won't be an interrupt if the pedals have stopped
			// check if a period longer than the minimum rpm has passed since
			// the last interrupt. If so set the throttle to minimum
			if(millis() - cadenceInterruptMillis > MAX_CADENCE_PERIOD)
			{
				throttleValue = THROTTLE_OFF;
				// Clear cadence values
				for(int i = 0; i < CADENCE_AVES; i++)
				{
					cadenceRaw[i] = 0; 
				}
				currentCadence = 0;
			}

			// Check if an interrupt has occured
			if(cadenceInteruptFlag == HIGH)
			{
				cadenceInterruptMillis = millis();	 // reset time since last interrupt for min rpm
				ProcessCadence();							// Update cadence rpm value
				cadenceInteruptFlag = LOW;			 // reset flag
				if(currentCadence > CADENCE_MAX) throttleValue = THROTTLE_MAX;
				else if(currentCadence < CADENCE_MIN) throttleValue = THROTTLE_OFF;
				else throttleValue =(  (float) (currentCadence-CADENCE_MIN) *THROTTLE_STEP) + THROTTLE_MIN;

			}

			// Just set Throttle to Max if Over ride pressed
			if(digitalRead(OVERIDE_PIN)==LOW)	// Switch pulls to ground when pressed
			{
				throttleValue = THROTTLE_MAX;//255;
			}
			Serial.println(digitalRead(BRAKE_PIN2));
			// Check if Brake activated
			if(digitalRead(BRAKE_PIN2)==HIGH)	// Switch pulls to ground when pressed
			{
				throttleValue = THROTTLE_OFF;
				brake = true;
			}
			else
			{
				brake = false;
			}

			if(currentMillis - previousMillis >= interval)
			{
				Serial.println("Four");
				pos_y = 0;
				LCD_disp.clearDisplay();   // clears the screen and buffer
				pos_y = DisplayHeading ( pos_y, " BATTERY");
				pos_y =  DisplayValue ( pos_y, GetAverageCurrent() , 'A');
				pos_y =  DisplayValue ( pos_y, GetAverageVoltage(), 'V');
				pos_y = DisplayHeading ( pos_y, " RIDER  ");
				pos_y =  DisplayValue ( pos_y, currentCadence, 'R');
				if (brake)
				{	
					pos_y =  DisplayMessage ( pos_y, "BRK ");	
				}
				else
				{
					//pos_y =  DisplayValue ( pos_y, throttleValue, 'T');
					pos_y = pos_y + 3;
					LCD_disp.setCursor(0 ,pos_y);
					LCD_disp.setTextSize(1);
					LCD_disp.setTextColor(BLACK,WHITE); // 'non inverted' text
					LCD_disp.print( THROTTLE_MAX);
					LCD_disp.setCursor(25 ,pos_y);
					LCD_disp.print( throttleValue);

					pos_y = pos_y + (FONT_HEIGHT * 2);	
					//pos_y =  DisplayHeading ( pos_y, THROTTLE_MAX);
					//THROTTLE_MAX = analogRead(POT);
				}
				LCD_disp.display();

				// save the last time you updated the display
				previousMillis = currentMillis;

			}
			currentMillis = millis();
			analogWrite(THROTTLE_PIN, 255 - throttleValue); // Actualy output the throttle value
		}
	}
}

void CadenceInterruptHandler()
{
	if(digitalRead(CADENCE_PIN) == HIGH) // Positive period
	{
		cadencePositiveTimer = millis();
		cadenceNegativePeriod = millis() - cadenceNegativeTimer;
	}

	else if(digitalRead(CADENCE_PIN) == LOW) // Negative period
	{
		cadencePositivePeriod = millis() - cadencePositiveTimer;
		cadenceNegativeTimer = millis();
		cadenceInteruptFlag = HIGH;	// set a flag so we know a pulse has occurred
	}
}

float GetAverageCurrent()
{
	// calculate the average: 
	return		( (currentTotal / NUM_CURRENT_READINGS) - CURRENT_OFFSET) * CURRENT_MULTIPLIER;
}
void UpdateCurrent()
{
	// Calculate Current //
	// subtract the last reading:
	currentTotal = currentTotal - currentReading[currentIndex];
	// read from the sensor:
	currentReading[currentIndex] = analogRead(BATT_A_PIN);
	// add the reading to the total:
	currentTotal = currentTotal + currentReading[currentIndex];
	// advance to the next position in the array:
	currentIndex = currentIndex + 1;

	// if we're at the end of the array...
	if (currentIndex >= NUM_CURRENT_READINGS) 
	{
		// ...wrap around to the beginning:
		currentIndex = 0;
		//count++;
	}
}

float GetAverageVoltage()
{
	// calculate the average: 
	return  (voltageTotal / NUM_VOLTAGE_READINGS)* VoltageMultiplier;
}

void UpdateVoltage()
{
	// Calculate Voltage //
	// subtract the last reading:
	voltageTotal = voltageTotal - voltageReading[voltageIndex];
	// read from the sensor:
	voltageReading[voltageIndex] = analogRead(BATT_V_PIN);
	// add the reading to the total:
	voltageTotal = voltageTotal + voltageReading[voltageIndex];
	// advance to the next position in the array:
	voltageIndex = voltageIndex + 1;

	// if we're at the end of the array...
	if (voltageIndex >= NUM_VOLTAGE_READINGS) 
	{
		// ...wrap around to the beginning:
		voltageIndex = 0;
	}
}


unsigned int DisplayMessage ( unsigned int posY, String message)
{
	LCD_disp.setCursor(0 ,posY);
	LCD_disp.setTextSize(2);
	LCD_disp.setTextColor(BLACK,WHITE); // 'non inverted' text
	LCD_disp.print( message);

	return posY + (FONT_HEIGHT * 2);
}

unsigned int DisplayWarning ( unsigned int posY, String message)
{
	posY = DisplayHeading ( posY,  "WARNING!");
	posY = DisplayMessage ( posY, message);

	return posY;
}

unsigned int DisplayHeading ( unsigned int posY, String heading)
{
	LCD_disp.setCursor(0 ,posY);
	LCD_disp.setTextSize(1);
	LCD_disp.setTextColor(WHITE, BLACK); // 'inverted' text
	LCD_disp.print( heading);

	return posY + FONT_HEIGHT+1;
}

unsigned int  DisplayValue ( unsigned int posY, float value, char unit)
{
	LCD_disp.setCursor(0 ,posY);
	LCD_disp.setTextSize(2);
	LCD_disp.setTextColor(BLACK,WHITE); // 'inverted' text

	if (value > 99)
	{
		LCD_disp.print( round(value));
	}
	else
	{
		value = round (value*10);
		value = value/10;
		if (value > 9.9)
		{
			value = (int)round(value * 10);
			LCD_disp.print( (int)value/10);
			LCD_disp.setTextSize(1);
			LCD_disp.print(".");
			LCD_disp.print( (int)(value - (( (int) value/10)*10)) );
		}
		else
		{
			LCD_disp.print( value,1);
		}
	}

	LCD_disp.setCursor(X_MAX - (FONT_WIDTH + 1),posY);
	LCD_disp.setTextSize(1);
	LCD_disp.print( unit);
	return posY + (FONT_HEIGHT * 2);
}

void ProcessCadence()
{
	int cadenceSum = 0;
	int cadenceCount = 0;
	// Check if pedaling forward
	if(cadencePositivePeriod > cadenceNegativePeriod)
	{
		float period = float(cadencePositivePeriod + cadenceNegativePeriod)/60000;
		if(cadencePtr++ >= CADENCE_AVES) cadencePtr = 0;
		cadenceRaw[cadencePtr] = (1/period)/CADENCE_MAGNETS;

		for(int i = 0; i < CADENCE_AVES; i++)
		{
			if (cadenceRaw[i] > 0)
			{
				cadenceSum += cadenceRaw[i]; 	// sum all of the cadence values
				cadenceCount++;
			}
		}
		if (cadenceCount > 0)		currentCadence = cadenceSum/cadenceCount; // the average result is the sum of the values divided by the number of values
		else currentCadence = 0;
	}
	// If not pedalling forward set cadence to zero
	else //currentCadence = 0;
	{
		for(int i = 0; i < CADENCE_AVES; i++)
		{
			cadenceRaw[i] = 0; 
		}
		currentCadence = 0;
	}
}


/*
void checkSwitches (void)
 {
 	int swReading = digitalRead(SW_UP_PIN);		// Read the switch state into a temp variable
 	if (swReading != previousSwitchUpState) 	switchUpDebounceTime = millis();    // reset the debouncing timer
 	if ((millis() - switchUpDebounceTime) > debounceDelay) // Debounce time is over so take this as the current state of the switch
 	{
 		if (swReading != switchUpState)	// Confirm if switch state has changed
 		{
 			switchUpState = swReading;		// Save state of the switch
 		}
 }
 previousSwitchUpState = swReading;
 
 
 
 
 	// Read the state ot the switches
 	switchUpState = digitalRead(SW_UP_PIN);
 	switchDownState = digitalRead(SW_DOWN_PIN);
 	switchLeftState = digitalRead(SW_LEFT_PIN);
 	switchRightState = digitalRead(SW_RIGHT_PIN);
 
 // If the switch changed, due to noise or pressing:
 	if (switchUpState != previousSwitchUpState) 								switchUpDebounceTime = millis();    // reset the debouncing timer
 	if (previousSwitchDownState != previousSwitchDownState) 	switchDownDebounceTime = millis();    // reset the debouncing timer
 	if (previousSwitchLeftState != previousSwitchLeftState) 			switchLeftDebounceTime = millis();    // reset the debouncing timer
 	if (previousSwitchRightState != previousSwitchRightState) 		switchRightDebounceTime = millis();    // reset the debouncing timer
 
 if ((millis() - lswitchUpDebounceTime) > debounceDelay) 
 {
 // whatever the reading is at, it's been there for longer
 // than the debounce delay, so take it as the actual current state:
 
 // if the button state has changed:
 if (reading != buttonState) {
 buttonState = reading;
 
 // only toggle the LED if the new button state is HIGH
 if (buttonState == HIGH) {
 ledState = !ledState;
 }
 }
 }
 
 
 */


void InitGraphing(void)
{
	Serial.begin(115200);					// Start the serial port
	Serial.print("R\n");						// Reset Grapher Plugin
	Serial.print("R\n");						// Do it a few time to make sure
	Serial.print("R\n");
	Serial.print("S1280:400\n");			// Set the Screen Size
	Serial.print("M10:10:60:20\n");	// Format Margins
	Serial.print("B255:255:255\n");	// Format Back ground colour
	Serial.print("F0:0:0\n");					// Format Axis Colour
	Serial.print("Y-5:20:5\n");			// Format Y Axis
	//Serial.print("Y500:600:10\n");			// Format Y Axis
	Serial.print("ATest:255:0:0\n");	// Add Data set colour Red
	//Serial.print("ATest:0:255:0\n");	// Add Data set colour Green
	//Serial.print("Atest:0:0:255\n");	// Add Data set colour Blue
}



void GraphValue(float value)
{
	Serial.print("V");
	Serial.print((currentAverage - CURRENT_OFFSET) * CURRENT_MULTIPLIER );
	//	Serial.print(currentAverage );
	Serial.print(":");
	//Serial.print(currentCadence);
	//Serial.print(":");
	//Serial.print(throttleValue);
	Serial.print("\n");
}